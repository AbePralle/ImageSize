#================================================================================
# ImageSize.rogue
# April 27, 2021
#================================================================================

$requireRogue "1.8.1"

uses Utility/CommandLineParser
uses Bitmap
uses Geometry

try
  ImageSize( System.command_line_arguments )
catch (error:Error)
  local w = Console.width.or_smaller( 80 )
  Console.error.println "="*w
  Console.error.println "ERROR"
  Console.error.println error->String.word_wrapped(w-2).indented(2)
  Console.error.println "="*w
  System.exit 1
endTry

class ImageSize
  PROPERTIES
    input_filepaths = String[]
    commands        = Command[]
    output_command  : Command

  METHODS
    method init( args:String[] )
      local command = CommandLineParser().
      [
        option( "--output=",  &alias="-o" )
        on_unknown( this=>show_usage )
      ].parse( System.command_line_arguments )

      if (command//args.is_empty)
        show_usage
        System.exit
      endIf

      commands.add( CmdPrintInfo() )

      local reader = command//args.to_list<<String>>.reader
      forEach (arg in reader)
        if (arg == "resize")
          commands.add( CmdResize(read_w_h("resize",reader)) )
        elseIf (arg == "replace")
          output_command = CmdSaveReplace()
        else
          input_filepaths.add( arg )
        endIf
      endForEach

      if (not output_command and commands.count > 1)
        if (command//options//output)
          output_command = CmdSave( command//options//output->String )
        else
          output_command = CmdSave( "{name}-{w}x{h}.{ext}" )
        endIf
      endIf

      forEach (filepath in input_filepaths)
        local bitmap = Bitmap( File(filepath) )
        if (bitmap.error) error( ''Error loading "$".''(filepath) )
        forEach (cmd in commands)
          bitmap = cmd( bitmap )
        endForEach
        if (output_command) output_command( bitmap )
      endForEach

    method error( message:String )
      Console.error.println "ERROR: " + message
      System.exit 1

    method read_w_h( cmd_name:String, reader:Reader<<String>> )->XY
      if (reader.has_another)
        local param = reader.read
        if (param.contains('x'))
          local parts = param.split( 'x' )
          if (parts[0].count)
            if (parts[1].count) return XY(parts[0]->Int32,parts[1]->Int32)
            else                return XY(parts[0]->Int32,0)
          else
            if (parts[1].count) return XY(0,parts[1]->Int32)
          endIf
        else
          local w = param->Int32
          if (reader.has_another)
            return XY( w, reader.read->Int32 )
          endIf
        endIf
      endIf

      error( ''Expected 'WxH', 'Wx', or 'xH' after '$'.''(cmd_name) )
      return XY.zero

    method show_usage
      println @|USAGE
               |  imagesize <input-patterns> [options] [--output=<output-pattern> | replace]
               |
               |INPUT PATTERNS
               |  path/to/file
               |  *.jpg
               |  "**/*.png"
               |
               |OPTIONS
               |  resize  [WxH | Wx | xH]
               |    Resizes image to specified pixel width and height. Uses a filtering effect
               |    when downsizing or when upsizing and not a whole multiple of the original
               |    size. Can specify width-only (Wx) and auto-calculate height from the aspect
               |    ratio |    or vice versa.
               |
               |  reframe [WxH | Wx | xH]
               |    Reframes / crops / resizes the canvas. The anchor point is CENTER by default
               |    and can be changed with a preceding 'anchor' command.
               |
               |  aspect [fit]  [WxH]
               |    Reframes the image to fit a given aspect ratio. 'aspect 1024x768' has the
               |    same effect as 'aspect 4x3'. 'aspect' uses the anchor specified by the
               |    preceding 'anchor' command or CENTER by default. 'aspect' performs an
               |    aspect fill and `aspect fit` can be used to add letterboxing/pillarboxing
               |    instead.
               |
               |  anchor [WxH]
               |  anchor [LEFT | RIGHT | TOP | BOTTOM | CENTER]
               |    Specifies the anchor used by 'reframe' and 'aspect fill/fit'. Either
               |    proportional values (0.0=left/top, 0.5=center, 1.0=right/bottom) or
               |    positional names may be used (`anchor TOP LEFT`, `anchor LEFT`, etc.
               |
               |  flip | hflip | vflip
               |    Flips (mirrors) an image horizontally or vertically.
               |
               |  rotate [-90|90|180|cw|ccw]
               |    Rotates the image 90 degrees (clockwise), -90 degrees (counter-clockwise),
               |    or 180 degrees.
               |
               |OUTPUT PATTERN
               |  path
               |  path/to/file[.png/.jpg/.jpeg] # Specify .png etc. to output in that format
               |  filepath-with-{placeholders}
               |  replace # overwrites source images
               |
               |OUTPUT PATTERN PLACEHOLDERS
               |  {path}      - The original path without the filename.
               |  {filename}  - The original filename+extension without the path.
               |  {name}      - The original filename without the path or extension.
               |  {ext}       - The extension of the original filename.
               |  {001}       - The sequence number (number of images written out so far). Use
               |                {001} for a minimum 3 digits starting at 001, {50} for a
               |                minimum 2 digits starting at 50, etc.
               |  {w}, {h}    - The width or height of the output image.
               |
               |EXAMPLES
               |  imagesize Screenshots/* aspect 4x3 resize 320x200 -o "Thumbnails/{name}.jpg"
endClass

class Command [abstract]
  METHODS
    method call( bitmap:Bitmap )->Bitmap [abstract]
      noAction
endClass

class CmdPrintInfo : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      println "$ [$x$]" (bitmap.filepath,bitmap.width,bitmap.height)
      return bitmap
endClass

class CmdResize( new_size:XY ) : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      local new_size = new_size
      local w = bitmap.width
      local h = bitmap.height
      if (new_size.x == 0)     new_size = XY( w*(new_size.y/h), new_size.y )
      elseIf (new_size.y == 0) new_size = XY( new_size.x, h*(new_size.x/w) )
      w = new_size.x
      h = new_size.y
      println "  resize [$x$] -> [$x$]" (bitmap.width,bitmap.height,w,h)
      bitmap.resize( w, h )
      return bitmap
endClass

class CmdSave : Command
  GLOBAL PROPERTIES
    sequence_number = 0

  PROPERTIES
    pattern    : String
    seq        : String
    seq_format : String

  METHODS
    method init( pattern )
      seq = pattern.extract_string( "*{$(I)}*" )
      if (seq)
        sequence_number = seq->Int32
        seq_format = "0"+(seq.count)
        seq = "{$}" (seq)
      endIf

    method call( bitmap:Bitmap )->Bitmap
      local filepath = pattern

      if (seq)
        filepath .= replacing( seq, sequence_number.format(seq_format) )
        ++sequence_number
      endIf

      filepath .= replacing( "{filepath}", bitmap.filepath )
      filepath .= replacing( "{filename}", File.filename(bitmap.filepath) )
      filepath .= replacing( "{name}",     File.filename(bitmap.filepath).before_last('.') )
      filepath .= replacing( "{ext}",      File.extension(bitmap.filepath) )
      filepath .= replacing( "{path}",     File.path(bitmap.filepath) )
      filepath .= replacing( "{w}",        bitmap.width->String )
      filepath .= replacing( "{h}",        bitmap.height->String )

      println "  -> $ [$x$]" (filepath,bitmap.width,bitmap.height)
      return bitmap
endClass

class CmdSaveReplace : Command
  METHODS
    method call( bitmap:Bitmap )->Bitmap
      local filepath = bitmap.filepath
      println "  -> $ [$x$]" (filepath,bitmap.width,bitmap.height)
      return bitmap
endClass

